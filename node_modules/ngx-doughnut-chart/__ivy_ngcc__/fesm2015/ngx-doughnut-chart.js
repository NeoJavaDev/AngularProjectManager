import { Injectable, NgModule, Component, Input, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NgxDonutChartComponent__svg_path_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "path", 6);
} if (rf & 2) {
    const arc_r3 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("d", arc_r3.d)("stroke", arc_r3.color)("stroke-width", ctx_r0.thickness);
} }
const _c0 = function (a0, a1) { return { "width": a0, "height": a1 }; };
function NgxDonutChartComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelement(1, "div", 8)(2, "div", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(4, _c0, ctx_r1.width, ctx_r1.height));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.totalClass)("innerText", ctx_r1.total);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerText", ctx_r1.title);
} }
const _c1 = function (a0) { return { "background-color": a0 }; };
function NgxDonutChartComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "div", 11)(2, "div", 12)(3, "div", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r4 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(3, _c1, item_r4.color));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerText", item_r4.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerText", item_r4.percentage);
} }
const _c2 = function (a0) { return { "width": a0 }; };
class NgxDonutChartService {
    constructor() { }
}
NgxDonutChartService.ɵfac = function NgxDonutChartService_Factory(t) { return new (t || NgxDonutChartService)(); };
NgxDonutChartService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxDonutChartService, factory: NgxDonutChartService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgxDonutChartService.ctorParameters = () => [];
/** @nocollapse */ NgxDonutChartService.ngInjectableDef = defineInjectable({ factory: function NgxDonutChartService_Factory() { return new NgxDonutChartService(); }, token: NgxDonutChartService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxDonutChartService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxDonutChartComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setDefaults();
        /** @type {?} */
        let angles = this._calculateAngles(this.data);
        /** @type {?} */
        let ArchPoints = this._calculateArcPoints(this.data);
    }
    /**
     * @return {?}
     */
    setDefaults() {
        this.arcs = [];
        this.radius = this.radius || 200;
        this.margin = this.margin || 10;
        this.thickness = this.thickness || 8;
        this.totalClass = this.totalClass || 'c-donutchart__title';
        this.origin = {
            x: this.radius,
            y: this.radius,
        };
        this.width = ((2 * this.radius) + (2 * this.margin)) + 'px';
        this.height = ((2 * this.radius) + (2 * this.margin)) + 'px';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _calculateArcPoints(data) {
        /** @type {?} */
        let archPoints = [];
        archPoints.push({
            x: this.radius,
            y: 0,
        });
        /** @type {?} */
        let startAngle = 0;
        /** @type {?} */
        let endAngle;
        /** @type {?} */
        let startX = this.origin.x;
        /** @type {?} */
        let startY = this.origin.y;
        for (let item of data) {
            endAngle = (startAngle + item.angle) % 360;
            startAngle += 8;
            /** @type {?} */
            let arc = this._describeArc(startX, startY, this.radius, startAngle, endAngle, item.color);
            this.arcs.push(arc);
            startAngle = endAngle;
        }
    }
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @param {?} startAngle
     * @param {?} endAngle
     * @param {?} color
     * @return {?}
     */
    _describeArc(x, y, radius, startAngle, endAngle, color) {
        /** @type {?} */
        let start = this._polarToCartesian(x, y, radius, startAngle);
        /** @type {?} */
        let end = this._polarToCartesian(x, y, radius, endAngle);
        /** @type {?} */
        let arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
        /** @type {?} */
        let d = [
            "M", start.x, start.y,
            "A", radius, radius, 0, arcSweep, 1, end.x, end.y,
        ].join(" ");
        return {
            d: d,
            end: end,
            color: color,
        };
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _calculateAngles(data) {
        /** @type {?} */
        let angles = [];
        /** @type {?} */
        let total = this._getTotal(data);
        this.total = total;
        for (let i = 0; i < data.length; i++) {
            /** @type {?} */
            let dataItem = data[i];
            /** @type {?} */
            let angle = (dataItem.value / total) * 360.0;
            dataItem.angle = angle;
            dataItem.percentage = ((dataItem.value / total) * 100.0).toFixed(2) + '%';
            angles.push(angle);
        }
        return angles;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _getTotal(data) {
        return data.reduce((a, b) => ({ value: a.value + b.value })).value;
    }
    /**
     * @param {?} centerX
     * @param {?} centerY
     * @param {?} radius
     * @param {?} angleInDegrees
     * @return {?}
     */
    _polarToCartesian(centerX, centerY, radius, angleInDegrees) {
        /** @type {?} */
        let angleInRadians = (angleInDegrees) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)) + this.margin,
            y: centerY + (radius * Math.sin(angleInRadians)) + this.margin,
        };
    }
}
NgxDonutChartComponent.ɵfac = function NgxDonutChartComponent_Factory(t) { return new (t || NgxDonutChartComponent)(); };
NgxDonutChartComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxDonutChartComponent, selectors: [["ngx-donut-chart"]], inputs: { radius: "radius", margin: "margin", thickness: "thickness", totalClass: "totalClass", data: "data", title: "title" }, decls: 6, vars: 10, consts: [[1, "c-donutchart", 3, "ngStyle"], ["xmlns", "http://www.w3.org/2000/svg", 3, "ngStyle"], ["fill", "transparent", "fill-opacity", "0.5", 4, "ngFor", "ngForOf"], ["class", "c-donutchart__text", 3, "ngStyle", 4, "ngIf"], [1, "c-donutchart__legends"], ["class", "c-donutchart__legend", 4, "ngFor", "ngForOf"], ["fill", "transparent", "fill-opacity", "0.5"], [1, "c-donutchart__text", 3, "ngStyle"], [3, "ngClass", "innerText"], [3, "innerText"], [1, "c-donutchart__legend"], [1, "c-donutchart__legend-bar", 3, "ngStyle"], [1, "c-donutchart__legend-title", 3, "innerText"], [1, "c-donutchart__legend-percentage", 3, "innerText"]], template: function NgxDonutChartComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(1, "svg", 1);
        ɵngcc0.ɵɵtemplate(2, NgxDonutChartComponent__svg_path_2_Template, 1, 3, "path", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, NgxDonutChartComponent_div_3_Template, 3, 7, "div", 3);
        ɵngcc0.ɵɵnamespaceHTML();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, NgxDonutChartComponent_div_5_Template, 4, 5, "div", 5);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(5, _c2, ctx.width));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx.width, ctx.height));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.arcs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.data);
    } }, dependencies: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgStyle], styles: [".c-donutchart[_ngcontent-%COMP%]{position:relative}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__text[_ngcontent-%COMP%]{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__title[_ngcontent-%COMP%]{font-size:40px}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legends[_ngcontent-%COMP%]{display:flex;justify-content:center}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend[_ngcontent-%COMP%]{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend-bar[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend-percentage[_ngcontent-%COMP%], .c-donutchart[_ngcontent-%COMP%]   .c-donutchart__legend-title[_ngcontent-%COMP%]{text-align:center}"] });
/** @nocollapse */
NgxDonutChartComponent.ctorParameters = () => [];
NgxDonutChartComponent.propDecorators = {
    data: [{ type: Input }],
    radius: [{ type: Input }],
    margin: [{ type: Input }],
    title: [{ type: Input }],
    thickness: [{ type: Input }],
    totalClass: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxDonutChartComponent, [{
        type: Component,
        args: [{ selector: 'ngx-donut-chart', template: `<div
  class="c-donutchart"
  [ngStyle]="{'width': width}">
  <svg
    [ngStyle]="{'width': width, 'height': height}"
    xmlns="http://www.w3.org/2000/svg">
    <!-- <path [attr.d]="pathD" stroke="black" fill="transparent" stroke-width="8" fill-opacity="0.5"/> -->
    <path
      *ngFor="let arc of arcs"
      [attr.d]="arc.d"
      [attr.stroke]="arc.color"
      fill="transparent"
      [attr.stroke-width]="thickness"
      fill-opacity="0.5"/>
  </svg>

  <div
    class="c-donutchart__text"
    *ngIf="title"
    [ngStyle]="{'width': width, 'height': height}">
    <div
      [ngClass]="totalClass"
      [innerText]="total"></div>
    <div [innerText]="title"></div>
  </div>

  <div class="c-donutchart__legends">
    <div
      class="c-donutchart__legend"
      *ngFor="let item of data">
      <div
        class="c-donutchart__legend-bar"
        [ngStyle]="{'background-color': item.color}">
      </div>

      <div
        class="c-donutchart__legend-title"
        [innerText]="item.label">
      </div>

      <div
        class="c-donutchart__legend-percentage"
        [innerText]="item.percentage">
      </div>
    </div>
  </div>
</div>
`, styles: [".c-donutchart{position:relative}.c-donutchart .c-donutchart__text{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart .c-donutchart__title{font-size:40px}.c-donutchart .c-donutchart__legends{display:flex;justify-content:center}.c-donutchart .c-donutchart__legend{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart .c-donutchart__legend-bar{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart .c-donutchart__legend-percentage,.c-donutchart .c-donutchart__legend-title{text-align:center}"] }]
    }], function () { return []; }, { radius: [{
            type: Input
        }], margin: [{
            type: Input
        }], thickness: [{
            type: Input
        }], totalClass: [{
            type: Input
        }], data: [{
            type: Input
        }], title: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxDonutChartModule {
}
NgxDonutChartModule.ɵfac = function NgxDonutChartModule_Factory(t) { return new (t || NgxDonutChartModule)(); };
NgxDonutChartModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxDonutChartModule });
NgxDonutChartModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxDonutChartModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [NgxDonutChartComponent],
                exports: [NgxDonutChartComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDonutChartModule, { declarations: function () { return [NgxDonutChartComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxDonutChartComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxDonutChartService, NgxDonutChartComponent, NgxDonutChartModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,